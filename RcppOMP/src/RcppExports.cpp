// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// table_multiple_threads
Rcpp::NumericVector table_multiple_threads(const int size);
RcppExport SEXP _RcppOMP_table_multiple_threads(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(table_multiple_threads(size));
    return rcpp_result_gen;
END_RCPP
}
// table_simd
Rcpp::NumericVector table_simd(const int size);
RcppExport SEXP _RcppOMP_table_simd(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(table_simd(size));
    return rcpp_result_gen;
END_RCPP
}
// table_serial
Rcpp::NumericVector table_serial(const int size);
RcppExport SEXP _RcppOMP_table_serial(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(table_serial(size));
    return rcpp_result_gen;
END_RCPP
}
// mandelbrot
void mandelbrot(const int width, const int height);
RcppExport SEXP _RcppOMP_mandelbrot(SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const int >::type height(heightSEXP);
    mandelbrot(width, height);
    return R_NilValue;
END_RCPP
}
// nesting_collapse
Rcpp::NumericMatrix nesting_collapse(const int xmax, const int ymax);
RcppExport SEXP _RcppOMP_nesting_collapse(SEXP xmaxSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(nesting_collapse(xmax, ymax));
    return rcpp_result_gen;
END_RCPP
}
// nesting_serial
Rcpp::NumericMatrix nesting_serial(const int xmax, const int ymax);
RcppExport SEXP _RcppOMP_nesting_serial(SEXP xmaxSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(nesting_serial(xmax, ymax));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _RcppOMP_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world_omp
void rcpp_hello_world_omp();
RcppExport SEXP _RcppOMP_rcpp_hello_world_omp() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_hello_world_omp();
    return R_NilValue;
END_RCPP
}
// rcpp_hello_world_omp_2
void rcpp_hello_world_omp_2();
RcppExport SEXP _RcppOMP_rcpp_hello_world_omp_2() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_hello_world_omp_2();
    return R_NilValue;
END_RCPP
}
// test_singletonOMP
std::vector<double> test_singletonOMP(const uint_least32_t& seed);
RcppExport SEXP _RcppOMP_test_singletonOMP(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint_least32_t& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(test_singletonOMP(seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppOMP_table_multiple_threads", (DL_FUNC) &_RcppOMP_table_multiple_threads, 1},
    {"_RcppOMP_table_simd", (DL_FUNC) &_RcppOMP_table_simd, 1},
    {"_RcppOMP_table_serial", (DL_FUNC) &_RcppOMP_table_serial, 1},
    {"_RcppOMP_mandelbrot", (DL_FUNC) &_RcppOMP_mandelbrot, 2},
    {"_RcppOMP_nesting_collapse", (DL_FUNC) &_RcppOMP_nesting_collapse, 2},
    {"_RcppOMP_nesting_serial", (DL_FUNC) &_RcppOMP_nesting_serial, 2},
    {"_RcppOMP_rcpp_hello_world", (DL_FUNC) &_RcppOMP_rcpp_hello_world, 0},
    {"_RcppOMP_rcpp_hello_world_omp", (DL_FUNC) &_RcppOMP_rcpp_hello_world_omp, 0},
    {"_RcppOMP_rcpp_hello_world_omp_2", (DL_FUNC) &_RcppOMP_rcpp_hello_world_omp_2, 0},
    {"_RcppOMP_test_singletonOMP", (DL_FUNC) &_RcppOMP_test_singletonOMP, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppOMP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
