// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _RcppOMP_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world_omp
void rcpp_hello_world_omp();
RcppExport SEXP _RcppOMP_rcpp_hello_world_omp() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_hello_world_omp();
    return R_NilValue;
END_RCPP
}
// rcpp_hello_world_omp_2
void rcpp_hello_world_omp_2();
RcppExport SEXP _RcppOMP_rcpp_hello_world_omp_2() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_hello_world_omp_2();
    return R_NilValue;
END_RCPP
}
// test_singletonOMP
void test_singletonOMP(const uint_least32_t& seed);
RcppExport SEXP _RcppOMP_test_singletonOMP(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint_least32_t& >::type seed(seedSEXP);
    test_singletonOMP(seed);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppOMP_rcpp_hello_world", (DL_FUNC) &_RcppOMP_rcpp_hello_world, 0},
    {"_RcppOMP_rcpp_hello_world_omp", (DL_FUNC) &_RcppOMP_rcpp_hello_world_omp, 0},
    {"_RcppOMP_rcpp_hello_world_omp_2", (DL_FUNC) &_RcppOMP_rcpp_hello_world_omp_2, 0},
    {"_RcppOMP_test_singletonOMP", (DL_FUNC) &_RcppOMP_test_singletonOMP, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppOMP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
